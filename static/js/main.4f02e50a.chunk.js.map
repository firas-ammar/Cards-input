{"version":3,"sources":["puce.png","visa.png","card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","handleChangeName","event","setState","companyName","target","value","handleChangeNumber","cardNumber","handleChangeThru","validThru","handleChangeHolder","cardHolder","state","className","this","toLocaleUpperCase","slice","id","src","puce","alt","placeholder","mastercard","type","onChange","Component","App","name","number","date","car","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,4NC4G5BC,E,YApGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,iBAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAXxB,EAanBC,mBAAmB,SAACL,GAClB,EAAKC,SAAS,CAACK,WAAYN,EAAMG,OAAOC,SAdvB,EAgBnBG,iBAAiB,SAACP,GAChB,EAAKC,SAAS,CAACO,UAAWR,EAAMG,OAAOC,SAjBtB,EAmBnBK,mBAAmB,SAACT,GAClB,EAAKC,SAAS,CAACS,WAAYV,EAAMG,OAAOC,SAlBxC,EAAKO,MAAQ,CACbT,YAAa,cACbI,WAAY,mBACZE,UAAW,OACXE,WAAY,cANK,E,sEAiCnB,OACE,yBAAKE,UAAU,OACf,yBAAKA,UAAU,OACf,wBAAIA,UAAU,qBAAsBC,KAAKF,MAAMT,YAAYY,oBAAoBC,MAAM,EAAE,IAAvF,KACE,yBAAKH,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAMA,UAAU,aAChB,yBAAKI,GAAG,MAAMC,IAAKC,IAAMC,IAAI,SAC7B,wBAAIP,UAAU,qBAAqBQ,YAAaP,KAAKF,MAAML,YACxDO,KAAKF,MAAML,WAAWS,MAAM,EAAE,GAAG,IAAIF,KAAKF,MAAML,WAAWS,MAAM,EAAE,GAAG,KAAKF,KAAKF,MAAML,WAAWS,MAAM,EAAE,IAAI,IAAIF,KAAKF,MAAML,WAAWS,MAAM,GAAG,MAGnJ,wBAAIH,UAAU,0BAA0BQ,YAAaP,KAAKF,MAAMD,YAC/DG,KAAKF,MAAMD,WAAWK,MAAM,EAAE,MAGjC,yBAAKH,UAAU,aACb,yBAAKA,UAAU,cACX,mCAEE,6BAFF,QAKF,yBAAKA,UAAU,QACb,gCAAQ,yCAAc,6BAAK,wBAAIA,UAAU,0BAA0BC,KAAKF,MAAMH,UAAUO,MAAM,EAAE,GAAG,MAAMF,KAAKF,MAAMH,UAAUO,MAAM,EAAE,QAI1I,yBAAKC,GAAG,MAAMC,IAAKI,IAAYF,IAAI,YAIvC,yBAAKP,UAAU,SACX,8BACE,8CAEF,2BAAOU,KAAK,OAAQC,SAAUV,KAAKd,oBAEjC,2BAAOuB,KAAK,SAASlB,MAAM,aAE7B,8BACE,6CAEF,2BAAOkB,KAAK,OAAQC,SAAUV,KAAKR,sBAEjC,2BAAOiB,KAAK,SAASlB,MAAM,aAE7B,8BACE,4CAEF,2BAAOkB,KAAK,OAAOC,SAAUV,KAAKN,oBAEhC,2BAAOe,KAAK,SAASlB,MAAM,aAE7B,8BACE,6CAEF,2BAAOkB,KAAK,OAAOC,SAAUV,KAAKJ,sBAEhC,2BAAOa,KAAK,SAASlB,MAAM,mB,GA7FpBoB,aCuEJC,G,kBAzEb,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXe,KAAM,GACLC,OAAQ,GACTC,KAAM,GACNC,IAAK,IANU,E,sEAkCjB,OACE,yBAAKjB,UAAU,OA+Bb,kBAAC,EAAD,W,GAnEUkB,IAAMN,YCQJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4f02e50a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/puce.7041a777.png\";","module.exports = __webpack_public_path__ + \"static/media/visa.7ffd65fe.png\";","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport puce from \"./puce.png\";\r\nimport mastercard from \"./visa.png\";\r\n\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    companyName :'CREDIT CARD',\r\n    cardNumber :'7253325678951245',\r\n    validThru :'1150',\r\n    cardHolder :'CARDHOLDER' ,\r\n     \r\n    }\r\n  }\r\n  handleChangeName=(event)=> {\r\n    this.setState({companyName: event.target.value});\r\n  }\r\n  handleChangeNumber=(event)=> {\r\n    this.setState({cardNumber: event.target.value});\r\n  }\r\n  handleChangeThru=(event)=> {\r\n    this.setState({validThru: event.target.value});\r\n  }\r\n  handleChangeHolder=(event)=> {\r\n    this.setState({cardHolder: event.target.value});\r\n  }\r\n//  renderCardNumber = number => {\r\n//     number = number.toString()\r\n//     let resultStr = ''\r\n//     for  (let i = 0; i< number.length; i +=4){\r\n//       resultStr += number.slice(i, i + 4) + ' '\r\n  \r\n//     }\r\n//     return resultStr.trim()\r\n//   }\r\n  render() {\r\n   \r\n  return (\r\n    <div className=\"npn\">\r\n    <div className=\"row\">\r\n    <h1 className=\"credit-card-title\" >{this.state.companyName.toLocaleUpperCase().slice(0,10)} </h1>\r\n      <div className=\"card-info\">\r\n        <div className=\"info\">\r\n          <div  className=\"container\">\r\n          <img id=\"pus\" src={puce} alt=\"puce\" />\r\n          <h2 className=\"credit-card-number\" placeholder={this.state.cardNumber}> \r\n            {this.state.cardNumber.slice(0,4)+' '+this.state.cardNumber.slice(4,8)+'  '+this.state.cardNumber.slice(8,12)+' '+this.state.cardNumber.slice(12,16)}\r\n            </h2>\r\n            </div>\r\n          <h2 className=\"credit-card-holder-name\" placeholder={this.state.cardHolder}>\r\n          {this.state.cardHolder.slice(0,15)}\r\n          </h2>\r\n        </div>\r\n        <div className='date-info'>\r\n          <div className='valid-date'>\r\n              <p>\r\n                VALID\r\n                <br />\r\n                THRU \r\n              </p>\r\n            <div className='date'>\r\n              <center><p>MONTH/YEAR <br/><h2 className=\"credit-card-valid-thru\">{this.state.validThru.slice(0,2)+' / '+this.state.validThru.slice(2,4)}</h2></p></center>\r\n            \r\n            </div>\r\n          </div>\r\n          <img id=\"log\" src={mastercard} alt=\"logo\" />\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <div className=\"Title\">\r\n          <form >\r\n            <label>\r\n              companyName:\r\n          <input type=\"text\"  onChange={this.handleChangeName} />\r\n            </label>\r\n            <input type=\"Button\" value=\"confirm\" />\r\n          </form>\r\n          <form >\r\n            <label>\r\n              cardNumber:\r\n          <input type=\"text\"  onChange={this.handleChangeNumber} />\r\n            </label>\r\n            <input type=\"Button\" value=\"confirm\" />\r\n          </form>\r\n          <form >\r\n            <label>\r\n              validThru:\r\n          <input type=\"text\" onChange={this.handleChangeThru} />\r\n            </label>\r\n            <input type=\"Button\" value=\"confirm\" />\r\n          </form>\r\n          <form >\r\n            <label>\r\n              cardHolder:\r\n          <input type=\"text\" onChange={this.handleChangeHolder} />\r\n            </label>\r\n            <input type=\"Button\" value=\"confirm\" />\r\n          </form>\r\n        </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default Card;\r\n","import React from 'react';\nimport Card from './card';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n       number: '',\n      date: '',\n      car: ''\n    }\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  // handleChangeName=(event)=> {\n  //   this.setState({name: event.target.value});\n  // }\n  // handleChangeNumber=(event)=> {\n  //   this.setState({number: event.target.value});\n  // }\n  // handleChangeThru=(event)=> {\n  //   this.setState({date: event.target.value});\n  // }\n  // handleChangeThru=(event)=> {\n  //   this.setState({card: event.target.value});\n  // }\n  \n  // renderCardNumber = number => {\n  //   number = number.toString()\n  //   let resultStr = ''\n  //   for  (let i = 0; i< number.length; i +=4){\n  //     resultStr += number.slice(i, i + 4) + ' '\n  \n  //   }\n  //   return resultStr.trim()\n  // }\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <div className=\"Title\">\n          <form >\n            <label>\n              companyName:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChangeName} />\n            </label>\n            <input type=\"Button\" value=\"confirm\" />\n          </form>\n          <form >\n            <label>\n              cardNumber:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChangeNumber} />\n            </label>\n            <input type=\"Button\" value=\"confirm\" />\n          </form>\n          <form >\n            <label>\n              validThru:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChangeThru} />\n            </label>\n            <input type=\"Button\" value=\"confirm\" />\n          </form>\n          <form >\n            <label>\n              cardHolder:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChangeHolder} />\n            </label>\n            <input type=\"Button\" value=\"confirm\" />\n          </form>\n        </div> */}\n        <Card />\n\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}